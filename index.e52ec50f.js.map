{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ static Status = {\n        idle: \"idle\",\n        playing: \"playing\",\n        win: \"win\",\n        lose: \"lose\"\n    };\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.board = initialState;\n        this.clear = initialState;\n        this.size = 4;\n        this.score = 0;\n        this.status = $a5fd07fa01589658$var$Game.Status.idle;\n    }\n    moveLeft() {\n        let moved = false;\n        for(let r = 0; r < this.size; r++){\n            let newRow = this.board[r];\n            newRow = this.slide(newRow);\n            if (newRow.toString() !== this.board[r].toString()) {\n                this.board[r] = newRow;\n                moved = true;\n            }\n        }\n        if (moved) {\n            this.getRandomTitle();\n            this.checkGameOver();\n            this.renderBoard();\n        }\n    }\n    moveRight() {\n        let moved = false;\n        for(let r = 0; r < this.size; r++){\n            let newRow = this.board[r];\n            newRow.reverse();\n            newRow = this.slide(newRow);\n            newRow.reverse();\n            if (newRow.toString() !== this.board[r].reverse().toString()) {\n                this.board[r] = newRow;\n                moved = true;\n            }\n        }\n        if (moved) {\n            this.getRandomTitle();\n            this.checkGameOver();\n            this.renderBoard();\n        }\n    }\n    moveUp() {\n        let moved = false;\n        for(let c = 0; c < this.size; c++){\n            let newRow = [\n                this.board[0][c],\n                this.board[1][c],\n                this.board[2][c],\n                this.board[3][c]\n            ];\n            newRow = this.slide(newRow);\n            for(let r = 0; r < this.size; r++){\n                if (newRow[r].toString() !== this.board[r][c].toString()) moved = true;\n                this.board[r][c] = newRow[r];\n            }\n        }\n        if (moved) {\n            this.getRandomTitle();\n            this.checkGameOver();\n            this.renderBoard();\n        }\n    }\n    moveDown() {\n        let moved = false;\n        for(let c = 0; c < this.size; c++){\n            let newRow = [\n                this.board[0][c],\n                this.board[1][c],\n                this.board[2][c],\n                this.board[3][c]\n            ];\n            newRow.reverse();\n            newRow = this.slide(newRow);\n            newRow.reverse();\n            for(let r = 0; r < this.size; r++){\n                if (newRow[r].toString() !== this.board[r][c].toString()) moved = true;\n                this.board[r][c] = newRow[r];\n            }\n        }\n        if (moved) {\n            this.getRandomTitle();\n            this.checkGameOver();\n            this.renderBoard();\n        }\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.board;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.status = $a5fd07fa01589658$var$Game.Status.playing;\n        this.getRandomTitle();\n        this.getRandomTitle();\n        this.renderBoard();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.status = $a5fd07fa01589658$var$Game.Status.idle;\n        this.score = 0;\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.renderBoard();\n    }\n    renderBoard() {\n        const table = document.querySelector(\".game-field\");\n        for(let r = 0; r < this.size; r++)for(let c = 0; c < this.size; c++){\n            table.rows[r].cells[c].textContent = \"\";\n            table.rows[r].cells[c].classList.value = \"\";\n            table.rows[r].cells[c].classList.add(\"field-cell\");\n            if (this.board[r][c] > 0) {\n                table.rows[r].cells[c].textContent = this.board[r][c];\n                table.rows[r].cells[c].classList.add(`field-cell--${this.board[r][c]}`);\n            }\n        }\n    }\n    getRandomTitle() {\n        const emptyCells = [];\n        for(let r = 0; r < this.size; r++){\n            for(let c = 0; c < this.size; c++)if (this.board[r][c] === 0) emptyCells.push({\n                x: r,\n                y: c\n            });\n        }\n        if (emptyCells.length > 0) {\n            const { x: x, y: y } = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.board[x][y] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    slide(row) {\n        let newRow = row.filter((val)=>val !== 0);\n        for(let i = 0; i < newRow.length; i++)if (newRow[i] === newRow[i + 1]) {\n            newRow[i] *= 2;\n            newRow[i + 1] = 0;\n            this.score += newRow[i];\n        }\n        newRow = newRow.filter((val)=>val !== 0);\n        while(newRow.length < this.size)newRow.push(0);\n        return newRow;\n    }\n    checkGameOver() {\n        if (!this.hasMoves()) this.status = $a5fd07fa01589658$var$Game.Status.lose;\n        else if (this.hasWon()) this.status = $a5fd07fa01589658$var$Game.Status.win;\n    }\n    hasMoves() {\n        for(let r = 0; r < this.size; r++)for(let c = 0; c < this.size; c++){\n            if (this.board[r][c] === 0) return true;\n            if (r < this.size - 1 && this.board[r][c] === this.board[r + 1][c]) return true;\n            if (c < this.size - 1 && this.board[r][c] === this.board[r][c + 1]) return true;\n        }\n    }\n    hasWon() {\n        return this.board.some((row)=>row.includes(2048));\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$start = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$winMessage = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\n$09e991522ca7e64e$var$start.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$start.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$start.className = \"button restart\";\n        $09e991522ca7e64e$var$start.textContent = \"Restart\";\n        $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$game.start();\n    } else {\n        $09e991522ca7e64e$var$start.className = \"button start\";\n        $09e991522ca7e64e$var$start.textContent = \"Start\";\n        $09e991522ca7e64e$var$startMessage.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$score.textContent = \"0\";\n        $09e991522ca7e64e$var$game.restart();\n    }\n});\ndocument.addEventListener(\"keyup\", (keyEvent)=>{\n    keyEvent.preventDefault();\n    const arrowUp = \"ArrowUp\";\n    const arrowDown = \"ArrowDown\";\n    const arrowRight = \"ArrowRight\";\n    const arrowLeft = \"ArrowLeft\";\n    switch(keyEvent.key){\n        case arrowUp:\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case arrowDown:\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case arrowRight:\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case arrowLeft:\n            $09e991522ca7e64e$var$game.moveLeft(); // Don't forget to add moveLeft function call\n            break;\n    }\n    $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.getScore();\n    $09e991522ca7e64e$var$handleMoveOutcome();\n});\nfunction $09e991522ca7e64e$var$handleMoveOutcome(numbersMove) {\n    const newStatus = $09e991522ca7e64e$var$game.getStatus();\n    if (newStatus === $a5fd07fa01589658$exports.Status.win) $09e991522ca7e64e$var$winMessage.classList.remove(\"hidden\");\n    else if (newStatus === $a5fd07fa01589658$exports.Status.lose) $09e991522ca7e64e$var$loseMessage.classList.remove(\"hidden\");\n}\n\n\n//# sourceMappingURL=index.e52ec50f.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst start = document.querySelector('.start');\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst score = document.querySelector('.game-score');\n\nstart.addEventListener('click', () => {\n  if (start.classList.contains('start')) {\n    start.className = 'button restart';\n    start.textContent = 'Restart';\n    startMessage.classList.add('hidden');\n    game.start();\n  } else {\n    start.className = 'button start';\n    start.textContent = 'Start';\n    startMessage.classList.remove('hidden');\n    winMessage.classList.add('hidden');\n    loseMessage.classList.add('hidden');\n    score.textContent = '0';\n\n    game.restart();\n  }\n});\n\ndocument.addEventListener('keyup', (keyEvent) => {\n  keyEvent.preventDefault();\n\n  const arrowUp = 'ArrowUp';\n  const arrowDown = 'ArrowDown';\n  const arrowRight = 'ArrowRight';\n  const arrowLeft = 'ArrowLeft';\n\n  switch (keyEvent.key) {\n    case arrowUp:\n      game.moveUp();\n      break;\n    case arrowDown:\n      game.moveDown();\n      break;\n    case arrowRight:\n      game.moveRight();\n      break;\n    case arrowLeft:\n      game.moveLeft(); // Don't forget to add moveLeft function call\n      break;\n  }\n\n  score.textContent = game.getScore();\n  handleMoveOutcome();\n});\n\nfunction handleMoveOutcome(numbersMove) {\n  const newStatus = game.getStatus();\n\n  if (newStatus === Game.Status.win) {\n    winMessage.classList.remove('hidden');\n  } else if (newStatus === Game.Status.lose) {\n    loseMessage.classList.remove('hidden');\n  }\n}\n","'use strict';\n\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  static Status = {\n    idle: 'idle',\n    playing: 'playing',\n    win: 'win',\n    lose: 'lose',\n  };\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.board = initialState;\n    this.clear = initialState;\n    this.size = 4;\n    this.score = 0;\n    this.status = Game.Status.idle;\n  }\n\n  moveLeft() {\n    let moved = false;\n\n    for (let r = 0; r < this.size; r++) {\n      let newRow = this.board[r];\n\n      newRow = this.slide(newRow);\n\n      if (newRow.toString() !== this.board[r].toString()) {\n        this.board[r] = newRow;\n\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.getRandomTitle();\n      this.checkGameOver();\n      this.renderBoard();\n    }\n  }\n  moveRight() {\n    let moved = false;\n\n    for (let r = 0; r < this.size; r++) {\n      let newRow = this.board[r];\n\n      newRow.reverse();\n\n      newRow = this.slide(newRow);\n      newRow.reverse();\n\n      if (newRow.toString() !== this.board[r].reverse().toString()) {\n        this.board[r] = newRow;\n\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.getRandomTitle();\n      this.checkGameOver();\n      this.renderBoard();\n    }\n  }\n  moveUp() {\n    let moved = false;\n\n    for (let c = 0; c < this.size; c++) {\n      let newRow = [\n        this.board[0][c],\n        this.board[1][c],\n        this.board[2][c],\n        this.board[3][c],\n      ];\n\n      newRow = this.slide(newRow);\n\n      for (let r = 0; r < this.size; r++) {\n        if (newRow[r].toString() !== this.board[r][c].toString()) {\n          moved = true;\n        }\n        this.board[r][c] = newRow[r];\n      }\n    }\n\n    if (moved) {\n      this.getRandomTitle();\n      this.checkGameOver();\n      this.renderBoard();\n    }\n  }\n  moveDown() {\n    let moved = false;\n\n    for (let c = 0; c < this.size; c++) {\n      let newRow = [\n        this.board[0][c],\n        this.board[1][c],\n        this.board[2][c],\n        this.board[3][c],\n      ];\n\n      newRow.reverse();\n      newRow = this.slide(newRow);\n      newRow.reverse();\n\n      for (let r = 0; r < this.size; r++) {\n        if (newRow[r].toString() !== this.board[r][c].toString()) {\n          moved = true;\n        }\n        this.board[r][c] = newRow[r];\n      }\n    }\n\n    if (moved) {\n      this.getRandomTitle();\n      this.checkGameOver();\n      this.renderBoard();\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = Game.Status.playing;\n    this.getRandomTitle();\n    this.getRandomTitle();\n    this.renderBoard();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.status = Game.Status.idle;\n    this.score = 0;\n\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.renderBoard();\n  }\n\n  renderBoard() {\n    const table = document.querySelector('.game-field');\n\n    for (let r = 0; r < this.size; r++) {\n      for (let c = 0; c < this.size; c++) {\n        table.rows[r].cells[c].textContent = '';\n        table.rows[r].cells[c].classList.value = '';\n        table.rows[r].cells[c].classList.add('field-cell');\n\n        if (this.board[r][c] > 0) {\n          table.rows[r].cells[c].textContent = this.board[r][c];\n\n          table.rows[r].cells[c].classList.add(\n            `field-cell--${this.board[r][c]}`,\n          );\n        }\n      }\n    }\n  }\n\n  getRandomTitle() {\n    const emptyCells = [];\n\n    for (let r = 0; r < this.size; r++) {\n      for (let c = 0; c < this.size; c++) {\n        if (this.board[r][c] === 0) {\n          emptyCells.push({ x: r, y: c });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const { x, y } =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[x][y] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  slide(row) {\n    let newRow = row.filter((val) => val !== 0);\n\n    for (let i = 0; i < newRow.length; i++) {\n      if (newRow[i] === newRow[i + 1]) {\n        newRow[i] *= 2;\n\n        newRow[i + 1] = 0;\n        this.score += newRow[i];\n      }\n    }\n\n    newRow = newRow.filter((val) => val !== 0);\n\n    while (newRow.length < this.size) {\n      newRow.push(0);\n    }\n\n    return newRow;\n  }\n\n  checkGameOver() {\n    if (!this.hasMoves()) {\n      this.status = Game.Status.lose;\n    } else if (this.hasWon()) {\n      this.status = Game.Status.win;\n    }\n  }\n\n  hasMoves() {\n    for (let r = 0; r < this.size; r++) {\n      for (let c = 0; c < this.size; c++) {\n        if (this.board[r][c] === 0) {\n          return true;\n        }\n\n        if (r < this.size - 1 && this.board[r][c] === this.board[r + 1][c]) {\n          return true;\n        }\n\n        if (c < this.size - 1 && this.board[r][c] === this.board[r][c + 1]) {\n          return true;\n        }\n      }\n    }\n  }\n\n  hasWon() {\n    return this.board.some((row) => row.includes(2048));\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","Status","idle","playing","win","lose","constructor","initialState","board","clear","size","score","status","moveLeft","moved","r","newRow","slide","toString","getRandomTitle","checkGameOver","renderBoard","moveRight","reverse","moveUp","c","moveDown","getScore","getState","getStatus","start","restart","table","document","querySelector","rows","cells","textContent","classList","value","add","emptyCells","push","x","y","length","Math","floor","random","row","filter","val","i","hasMoves","hasWon","some","includes","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$start","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$score","addEventListener","contains","className","remove","keyEvent","preventDefault","key","$09e991522ca7e64e$var$handleMoveOutcome","newStatus"],"version":3,"file":"index.e52ec50f.js.map"}
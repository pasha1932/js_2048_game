{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_define_property.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $cd5a47cf8ef6d766$export$71511d61b312f219(obj, key, value) {\n    if (key in obj) Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    });\n    else obj[key] = value;\n    return obj;\n}\n\n\n\"use strict\";\nvar $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.board = initialState;\n        this.clear = initialState;\n        this.size = 4;\n        this.score = 0;\n        this.status = Game.Status.idle;\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var moved = false;\n                for(var r = 0; r < this.size; r++){\n                    var newRow = this.board[r];\n                    newRow = this.slide(newRow);\n                    if (newRow.toString() !== this.board[r].toString()) {\n                        this.board[r] = newRow;\n                        moved = true;\n                    }\n                }\n                if (moved) {\n                    this.getRandomTitle();\n                    this.checkGameOver();\n                    this.renderBoard();\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var moved = false;\n                for(var r = 0; r < this.size; r++){\n                    var newRow = this.board[r];\n                    newRow.reverse();\n                    newRow = this.slide(newRow);\n                    newRow.reverse();\n                    if (newRow.toString() !== this.board[r].reverse().toString()) {\n                        this.board[r] = newRow;\n                        moved = true;\n                    }\n                }\n                if (moved) {\n                    this.getRandomTitle();\n                    this.checkGameOver();\n                    this.renderBoard();\n                }\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var moved = false;\n                for(var c = 0; c < this.size; c++){\n                    var newRow = [\n                        this.board[0][c],\n                        this.board[1][c],\n                        this.board[2][c],\n                        this.board[3][c]\n                    ];\n                    newRow = this.slide(newRow);\n                    for(var r = 0; r < this.size; r++){\n                        if (newRow[r].toString() !== this.board[r][c].toString()) moved = true;\n                        this.board[r][c] = newRow[r];\n                    }\n                }\n                if (moved) {\n                    this.getRandomTitle();\n                    this.checkGameOver();\n                    this.renderBoard();\n                }\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var moved = false;\n                for(var c = 0; c < this.size; c++){\n                    var newRow = [\n                        this.board[0][c],\n                        this.board[1][c],\n                        this.board[2][c],\n                        this.board[3][c]\n                    ];\n                    newRow.reverse();\n                    newRow = this.slide(newRow);\n                    newRow.reverse();\n                    for(var r = 0; r < this.size; r++){\n                        if (newRow[r].toString() !== this.board[r][c].toString()) moved = true;\n                        this.board[r][c] = newRow[r];\n                    }\n                }\n                if (moved) {\n                    this.getRandomTitle();\n                    this.checkGameOver();\n                    this.renderBoard();\n                }\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.board;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.status = Game.Status.playing;\n                this.getRandomTitle();\n                this.getRandomTitle();\n                this.renderBoard();\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.status = Game.Status.idle;\n                this.score = 0;\n                this.board = [\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ]\n                ];\n                this.renderBoard();\n            }\n        },\n        {\n            key: \"renderBoard\",\n            value: function renderBoard() {\n                var table = document.querySelector(\".game-field\");\n                for(var r = 0; r < this.size; r++)for(var c = 0; c < this.size; c++){\n                    table.rows[r].cells[c].textContent = \"\";\n                    table.rows[r].cells[c].classList.value = \"\";\n                    table.rows[r].cells[c].classList.add(\"field-cell\");\n                    if (this.board[r][c] > 0) {\n                        table.rows[r].cells[c].textContent = this.board[r][c];\n                        table.rows[r].cells[c].classList.add(\"field-cell--\".concat(this.board[r][c]));\n                    }\n                }\n            }\n        },\n        {\n            key: \"getRandomTitle\",\n            value: function getRandomTitle() {\n                var emptyCells = [];\n                for(var r = 0; r < this.size; r++){\n                    for(var c = 0; c < this.size; c++)if (this.board[r][c] === 0) emptyCells.push({\n                        x: r,\n                        y: c\n                    });\n                }\n                if (emptyCells.length > 0) {\n                    var _emptyCells_Math_floor = emptyCells[Math.floor(Math.random() * emptyCells.length)], x = _emptyCells_Math_floor.x, y = _emptyCells_Math_floor.y;\n                    this.board[x][y] = Math.random() < 0.9 ? 2 : 4;\n                }\n            }\n        },\n        {\n            key: \"slide\",\n            value: function slide(row) {\n                var newRow = row.filter(function(val) {\n                    return val !== 0;\n                });\n                for(var i = 0; i < newRow.length; i++)if (newRow[i] === newRow[i + 1]) {\n                    newRow[i] *= 2;\n                    newRow[i + 1] = 0;\n                    this.score += newRow[i];\n                }\n                newRow = newRow.filter(function(val) {\n                    return val !== 0;\n                });\n                while(newRow.length < this.size)newRow.push(0);\n                return newRow;\n            }\n        },\n        {\n            key: \"checkGameOver\",\n            value: function checkGameOver() {\n                if (!this.hasMoves()) this.status = Game.Status.lose;\n                else if (this.hasWon()) this.status = Game.Status.win;\n            }\n        },\n        {\n            key: \"hasMoves\",\n            value: function hasMoves() {\n                for(var r = 0; r < this.size; r++)for(var c = 0; c < this.size; c++){\n                    if (this.board[r][c] === 0) return true;\n                    if (r < this.size - 1 && this.board[r][c] === this.board[r + 1][c]) return true;\n                    if (c < this.size - 1 && this.board[r][c] === this.board[r][c + 1]) return true;\n                }\n            }\n        },\n        {\n            key: \"hasWon\",\n            value: function hasWon() {\n                return this.board.some(function(row) {\n                    return row.includes(2048);\n                });\n            }\n        }\n    ]);\n    return Game;\n}();\n/**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ (0, $cd5a47cf8ef6d766$export$71511d61b312f219)($3d28d7f1aac198f5$var$Game, \"Status\", {\n    idle: \"idle\",\n    playing: \"playing\",\n    win: \"win\",\n    lose: \"lose\"\n});\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$start = document.querySelector(\".start\");\nvar $197cd56b15c33885$var$startMessage = document.querySelector(\".message-start\");\nvar $197cd56b15c33885$var$winMessage = document.querySelector(\".message-win\");\nvar $197cd56b15c33885$var$loseMessage = document.querySelector(\".message-lose\");\nvar $197cd56b15c33885$var$score = document.querySelector(\".game-score\");\n$197cd56b15c33885$var$start.addEventListener(\"click\", function() {\n    if ($197cd56b15c33885$var$start.classList.contains(\"start\")) {\n        $197cd56b15c33885$var$start.className = \"button restart\";\n        $197cd56b15c33885$var$start.textContent = \"Restart\";\n        $197cd56b15c33885$var$startMessage.classList.add(\"hidden\");\n        $197cd56b15c33885$var$game.start();\n    } else {\n        $197cd56b15c33885$var$start.className = \"button start\";\n        $197cd56b15c33885$var$start.textContent = \"Start\";\n        $197cd56b15c33885$var$startMessage.classList.remove(\"hidden\");\n        $197cd56b15c33885$var$winMessage.classList.add(\"hidden\");\n        $197cd56b15c33885$var$loseMessage.classList.add(\"hidden\");\n        $197cd56b15c33885$var$score.textContent = \"0\";\n        $197cd56b15c33885$var$game.restart();\n    }\n});\ndocument.addEventListener(\"keyup\", function(keyEvent) {\n    keyEvent.preventDefault();\n    var arrowUp = \"ArrowUp\";\n    var arrowDown = \"ArrowDown\";\n    var arrowRight = \"ArrowRight\";\n    var arrowLeft = \"ArrowLeft\";\n    switch(keyEvent.key){\n        case arrowUp:\n            $197cd56b15c33885$var$game.moveUp();\n            break;\n        case arrowDown:\n            $197cd56b15c33885$var$game.moveDown();\n            break;\n        case arrowRight:\n            $197cd56b15c33885$var$game.moveRight();\n            break;\n        case arrowLeft:\n            $197cd56b15c33885$var$game.moveLeft(); // Don't forget to add moveLeft function call\n            break;\n    }\n    $197cd56b15c33885$var$score.textContent = $197cd56b15c33885$var$game.getScore();\n    $197cd56b15c33885$var$handleMoveOutcome();\n});\nfunction $197cd56b15c33885$var$handleMoveOutcome(numbersMove) {\n    var newStatus = $197cd56b15c33885$var$game.getStatus();\n    if (newStatus === $3d28d7f1aac198f5$exports.Status.win) $197cd56b15c33885$var$winMessage.classList.remove(\"hidden\");\n    else if (newStatus === $3d28d7f1aac198f5$exports.Status.lose) $197cd56b15c33885$var$loseMessage.classList.remove(\"hidden\");\n}\n\n})();\n//# sourceMappingURL=index.66654998.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst start = document.querySelector('.start');\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst score = document.querySelector('.game-score');\n\nstart.addEventListener('click', () => {\n  if (start.classList.contains('start')) {\n    start.className = 'button restart';\n    start.textContent = 'Restart';\n    startMessage.classList.add('hidden');\n    game.start();\n  } else {\n    start.className = 'button start';\n    start.textContent = 'Start';\n    startMessage.classList.remove('hidden');\n    winMessage.classList.add('hidden');\n    loseMessage.classList.add('hidden');\n    score.textContent = '0';\n\n    game.restart();\n  }\n});\n\ndocument.addEventListener('keyup', (keyEvent) => {\n  keyEvent.preventDefault();\n\n  const arrowUp = 'ArrowUp';\n  const arrowDown = 'ArrowDown';\n  const arrowRight = 'ArrowRight';\n  const arrowLeft = 'ArrowLeft';\n\n  switch (keyEvent.key) {\n    case arrowUp:\n      game.moveUp();\n      break;\n    case arrowDown:\n      game.moveDown();\n      break;\n    case arrowRight:\n      game.moveRight();\n      break;\n    case arrowLeft:\n      game.moveLeft(); // Don't forget to add moveLeft function call\n      break;\n  }\n\n  score.textContent = game.getScore();\n  handleMoveOutcome();\n});\n\nfunction handleMoveOutcome(numbersMove) {\n  const newStatus = game.getStatus();\n\n  if (newStatus === Game.Status.win) {\n    winMessage.classList.remove('hidden');\n  } else if (newStatus === Game.Status.lose) {\n    loseMessage.classList.remove('hidden');\n  }\n}\n","'use strict';\n\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  static Status = {\n    idle: 'idle',\n    playing: 'playing',\n    win: 'win',\n    lose: 'lose',\n  };\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.board = initialState;\n    this.clear = initialState;\n    this.size = 4;\n    this.score = 0;\n    this.status = Game.Status.idle;\n  }\n\n  moveLeft() {\n    let moved = false;\n\n    for (let r = 0; r < this.size; r++) {\n      let newRow = this.board[r];\n\n      newRow = this.slide(newRow);\n\n      if (newRow.toString() !== this.board[r].toString()) {\n        this.board[r] = newRow;\n\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.getRandomTitle();\n      this.checkGameOver();\n      this.renderBoard();\n    }\n  }\n  moveRight() {\n    let moved = false;\n\n    for (let r = 0; r < this.size; r++) {\n      let newRow = this.board[r];\n\n      newRow.reverse();\n\n      newRow = this.slide(newRow);\n      newRow.reverse();\n\n      if (newRow.toString() !== this.board[r].reverse().toString()) {\n        this.board[r] = newRow;\n\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.getRandomTitle();\n      this.checkGameOver();\n      this.renderBoard();\n    }\n  }\n  moveUp() {\n    let moved = false;\n\n    for (let c = 0; c < this.size; c++) {\n      let newRow = [\n        this.board[0][c],\n        this.board[1][c],\n        this.board[2][c],\n        this.board[3][c],\n      ];\n\n      newRow = this.slide(newRow);\n\n      for (let r = 0; r < this.size; r++) {\n        if (newRow[r].toString() !== this.board[r][c].toString()) {\n          moved = true;\n        }\n        this.board[r][c] = newRow[r];\n      }\n    }\n\n    if (moved) {\n      this.getRandomTitle();\n      this.checkGameOver();\n      this.renderBoard();\n    }\n  }\n  moveDown() {\n    let moved = false;\n\n    for (let c = 0; c < this.size; c++) {\n      let newRow = [\n        this.board[0][c],\n        this.board[1][c],\n        this.board[2][c],\n        this.board[3][c],\n      ];\n\n      newRow.reverse();\n      newRow = this.slide(newRow);\n      newRow.reverse();\n\n      for (let r = 0; r < this.size; r++) {\n        if (newRow[r].toString() !== this.board[r][c].toString()) {\n          moved = true;\n        }\n        this.board[r][c] = newRow[r];\n      }\n    }\n\n    if (moved) {\n      this.getRandomTitle();\n      this.checkGameOver();\n      this.renderBoard();\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = Game.Status.playing;\n    this.getRandomTitle();\n    this.getRandomTitle();\n    this.renderBoard();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.status = Game.Status.idle;\n    this.score = 0;\n\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.renderBoard();\n  }\n\n  renderBoard() {\n    const table = document.querySelector('.game-field');\n\n    for (let r = 0; r < this.size; r++) {\n      for (let c = 0; c < this.size; c++) {\n        table.rows[r].cells[c].textContent = '';\n        table.rows[r].cells[c].classList.value = '';\n        table.rows[r].cells[c].classList.add('field-cell');\n\n        if (this.board[r][c] > 0) {\n          table.rows[r].cells[c].textContent = this.board[r][c];\n\n          table.rows[r].cells[c].classList.add(\n            `field-cell--${this.board[r][c]}`,\n          );\n        }\n      }\n    }\n  }\n\n  getRandomTitle() {\n    const emptyCells = [];\n\n    for (let r = 0; r < this.size; r++) {\n      for (let c = 0; c < this.size; c++) {\n        if (this.board[r][c] === 0) {\n          emptyCells.push({ x: r, y: c });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const { x, y } =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[x][y] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  slide(row) {\n    let newRow = row.filter((val) => val !== 0);\n\n    for (let i = 0; i < newRow.length; i++) {\n      if (newRow[i] === newRow[i + 1]) {\n        newRow[i] *= 2;\n\n        newRow[i + 1] = 0;\n        this.score += newRow[i];\n      }\n    }\n\n    newRow = newRow.filter((val) => val !== 0);\n\n    while (newRow.length < this.size) {\n      newRow.push(0);\n    }\n\n    return newRow;\n  }\n\n  checkGameOver() {\n    if (!this.hasMoves()) {\n      this.status = Game.Status.lose;\n    } else if (this.hasWon()) {\n      this.status = Game.Status.win;\n    }\n  }\n\n  hasMoves() {\n    for (let r = 0; r < this.size; r++) {\n      for (let c = 0; c < this.size; c++) {\n        if (this.board[r][c] === 0) {\n          return true;\n        }\n\n        if (r < this.size - 1 && this.board[r][c] === this.board[r + 1][c]) {\n          return true;\n        }\n\n        if (c < this.size - 1 && this.board[r][c] === this.board[r][c + 1]) {\n          return true;\n        }\n      }\n    }\n  }\n\n  hasWon() {\n    return this.board.some((row) => row.includes(2048));\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n    } else obj[key] = value;\n\n    return obj;\n}\nexport { _define_property as _ };\n"],"names":["key","value","$3d28d7f1aac198f5$exports","$3d28d7f1aac198f5$var$Game","$197cd56b15c33885$var$game","$197cd56b15c33885$var$start","$197cd56b15c33885$var$startMessage","$197cd56b15c33885$var$winMessage","$197cd56b15c33885$var$loseMessage","$197cd56b15c33885$var$score","protoProps","Game","initialState","arguments","length","instance","Constructor","TypeError","board","clear","size","score","status","Status","idle","moved","r","newRow","slide","toString","getRandomTitle","checkGameOver","renderBoard","reverse","c","playing","table","document","querySelector","rows","cells","textContent","classList","add","concat","emptyCells","push","x","y","_emptyCells_Math_floor","Math","floor","random","row","filter","val","i","hasMoves","hasWon","win","lose","some","includes","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","prototype","obj","addEventListener","contains","className","start","remove","restart","keyEvent","newStatus","preventDefault","moveUp","moveDown","moveRight","moveLeft","getScore","getStatus"],"version":3,"file":"index.66654998.js.map"}